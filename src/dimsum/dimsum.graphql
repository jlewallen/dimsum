schema {
  query: Query
  mutation: Mutation
}

scalar Entity
scalar Reply
scalar Key

input PersistenceCriteria {
  read: String!
  write: String!
}

input LanguageQueryCriteria {
  text: String!
  evaluator: Key!
  persistence: PersistenceCriteria
}

type Evaluation {
  reply: Reply!
  entities: [KeyedEntity!]
}

type KeyedEntity {
  key: String!
  serialized: Entity!
}

type Query {
  size: Int!
  world: KeyedEntity!
  entitiesByKey(key: Key): [KeyedEntity!]
  entitiesByGid(gid: Int): [KeyedEntity!]
  areas: [KeyedEntity!]
  people: [KeyedEntity!]
}

scalar Token

input Credentials {
  username: String!
  password: String!
}

input EntityDiff {
  key: String!
  serialized: String
}

type EntitiesUpdated {
  affected: Int!
}

type Mutation {
  login(credentials: Credentials!): Token!
  makeSample: EntitiesUpdated
  update(entities: [EntityDiff!]): EntitiesUpdated
  language(criteria: LanguageQueryCriteria!): Evaluation!
}
